package com.jelena.mycompany.jdbc;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;


public class QueryEmployeeTest {	
	// Will be used to format dates
		private static final SimpleDateFormat sdf = new SimpleDateFormat(
				//"dd/MM/yyyy");  // 17/03/1987
				"dd. MMM yyyy.");  //  17. Mar 1987.

	public static void main(String[] args) {
		Connection conn = null;
		PreparedStatement pstmt = null;
		try {
			conn = JDBCUtil.getConnection();
			pstmt = getSelectSQL(conn);
			// displays two employees
			//displayEmployee(pstmt, 1);	
			//displayEmployee(pstmt, 3);
			displayEmployee(pstmt, 2);
			JDBCUtil.commit(conn);
			System.out.println("Employee selected and displayed successfully.");			
		} catch (SQLException e) {
			System.out.println(e.getMessage());
			JDBCUtil.rollback(conn);
		} finally {
			JDBCUtil.closeConnection(conn);
		}
	}

	
	public static void displayEmployee(PreparedStatement pstmt,
			int employeeId) throws SQLException {
		
		// Set all the input parameters
		pstmt.setInt(1, employeeId);
		
		// Executes the SQL query in this PreparedStatement object and 
		// returns the ResultSet object generated by the query
		ResultSet rs = pstmt.executeQuery();	
		
		// Checking the properties of result set
		int cursorType = rs.getType();
		// By default result set is scrollable only in the forward direction
		// You can change that in prepareStatement metohd
		if (cursorType == ResultSet.TYPE_FORWARD_ONLY) {
			System.out.println("JDBC driver returned a forward - only cursor");
		}
		else if (cursorType == ResultSet.TYPE_SCROLL_INSENSITIVE){
			System.out.println("JDBC driver returned ResultSet which is TYPE_SCROLL_INSENSITIVE" +
					"  -- bidirectional, insensitive");
		} 
		else if(cursorType == ResultSet.TYPE_SCROLL_SENSITIVE) {
			System.out.println("JDBC driver returned ResultSet which is TYPE_SCROLL_SENSITIVE" +
					"  -- bidirectional, sensitive");
		}
		
		// Process the result set
		printResultSet(rs);		
	}
	
	
	public static void printResultSet(ResultSet rs) throws SQLException {
		// this returns false if the cursor is not before the first record 
		// or if there are no rows in the ResultSet		
		if (!rs.isBeforeFirst()) {
		    System.out.println("No data.");
		} 
		while(rs.next()) {
			int employeeId = rs.getInt("employee_id");
			String firstName = rs.getString("first_name");
			String lastName = rs.getString("last_name");
			
			// hire_date can be null
			Date hireDate = rs.getDate("hire_date");
			boolean isHireDateNull = rs.wasNull();
			
			// salary can be null
			BigDecimal salary = rs.getBigDecimal("salary");
			boolean isSalaryNull = rs.wasNull();
			
			String formattedHireDate = null;
			if (!isHireDateNull) {
				formattedHireDate = formatDate(hireDate);
			}
			
			System.out.print("Employee ID: " + employeeId);
			System.out.print(", First Name: " + firstName);
			System.out.print(", Last Name: " + lastName);
			if (isHireDateNull) {
				System.out.print(", Hire Date: null");
			}
			else {
				System.out.print(", Hire Date: " + formattedHireDate);
			}
			if (isSalaryNull) {
				System.out.println(", Salary: null");
			}
			else {
				System.out.println(", Salary: " + salary);
			}			
		}
	}
	
	
	public static String formatDate(Date dt) {
		if (dt == null) {
			return "";
		}
		else {
			String formattedDate = sdf.format(dt);
			return formattedDate;
		}		
	}
	
	
	public static PreparedStatement getSelectSQL(Connection conn) throws SQLException {
		String SQL = "SELECT employee_id, first_name, last_name, " +
				" hire_date, salary " +
				"FROM employees " + 
				" WHERE employee_id = ?";								
		PreparedStatement pstmt = conn.prepareStatement(SQL);
		return pstmt;
	}
}
